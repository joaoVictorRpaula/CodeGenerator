@{
    var applicationName = Model.Application.ApplicationName;
    var tableName = Model.Table.name;
    var columns = Model.Table.Columns;
    var parentRelations = Model.Table.ParentRelations;
    var relatedRelations = Model.Table.RelatedRelations;
    var parentRelationList = new List<string>();
    var relatedRelationList = new List<string>();
    var existPrimaryKey = false;
}
using @($"{applicationName}.DOMAIN.Models");
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace @($"{applicationName}.CORE.Mapping")
{
    public class @(tableName)ClassMap : IEntityTypeConfiguration<@(tableName)>
    {
        public void Configure(EntityTypeBuilder<@(tableName)> builder)
        {
            builder.ToTable("@(tableName)", "dbo");

            @foreach (var column in columns)
            {
                @if(column.IndexColumns.Count > 0 ? column.IndexColumns[0].Indexes.is_primary_key : false)
                {
                     <text>            builder.HasKey(x => new {x.@(column.name)});</text>
                     <text>
</text>
                existPrimaryKey = true;
                }

                @if(!(column.IndexColumns.Count > 0 ? column.IndexColumns[0].Indexes.is_primary_key : false))
                {
                     <text>            builder.Property(x => x.@(column.name))</text>
                     <text>               .HasColumnName("@(column.name)")</text>
                     @if (!column.is_nullable) 
                     { 
                         <text>
               .IsRequired()</text> 
                     }
                     <text>;</text>
                     <text>
</text>
                }
            }
            @if (!existPrimaryKey)
            {
                <text>            builder.HasNoKey();</text>
            }

            @foreach (var relation in parentRelations)
            {
                @if (relatedRelationList.Contains(relation.RelatedTable.name))
                {
                var increment = relatedRelationList.FindAll(x => x == relation.RelatedTable.name).Count();
                <text>          builder.HasOne(x => x.@($"{relation.RelatedTable.name}{increment}"))</text>
                <text>              .WithMany(x => x.@(tableName)@(increment))</text>
                <text>              .HasForeignKey(x => x.@($"{relation.ParentColumn.name}"));</text>
                <text>
</text>
                relatedRelationList.Add(relation.RelatedTable.name);
                }
                @if (!relatedRelationList.Contains(relation.RelatedTable.name))
                {
                <text>          builder.HasOne(x => x.@(relation.RelatedTable.name))</text>
                <text>              .WithMany(x => x.@(tableName))</text>
                <text>              .HasForeignKey(x => x.@(relation.ParentColumn.name));</text>
                <text>
</text>
                relatedRelationList.Add(relation.RelatedTable.name);
                }
                
            }

            @foreach (var relatedRelation in relatedRelations)
            {
            @if (parentRelationList.Contains(relatedRelation.ParentTable.name))
                {
                var increment = parentRelationList.FindAll(x => x == relatedRelation.ParentTable.name).Count();
                <text>          builder.HasMany(x => x.@($"{relatedRelation.ParentTable.name}{increment}"))</text>
                <text>              .WithOne(x => x.@(tableName)@(increment))</text>
                <text>              .HasForeignKey(x => x.@($"{relatedRelation.ParentColumn.name}"));</text>
                <text>
</text>
                parentRelationList.Add(relatedRelation.ParentTable.name);
                }
            @if (!parentRelationList.Contains(relatedRelation.ParentTable.name))
                {
                <text>          builder.HasMany(x => x.@(relatedRelation.ParentTable.name))</text>
                <text>              .WithOne(x => x.@(tableName))</text>
                <text>              .HasForeignKey(x => x.@(relatedRelation.ParentColumn.name));</text>
                <text>
                </text>
                parentRelationList.Add(relatedRelation.ParentTable.name);
                }
            }
        }
    }
}
